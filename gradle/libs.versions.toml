[versions]
kotlin = "1.9.10"

kotlinxCoroutines = "1.7.3"
kotlinxSerialization = "1.6.0"

jupyterApi = "0.12.0-65"

junit = "5.9.3"
kotlinTest = "5.5.4"
mockk = "1.13.5"
assertj = "3.22.0"

chapi = "2.3.5"

slf4j = "2.0.5"

archguard = "2.1.4"
codedb = "0.1.2"

logback = "1.4.5"
kotlinLogging = "5.1.0"

gson = "2.10.1"

kotless = "0.2.0"

shadowJar = "8.1.1"

jgit = "6.7.0.202309050840-r"

[libraries]
kotlin-stdlib = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib", version.ref = "kotlin" }
kotlin-stdlib-jdk8 = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib-jdk8", version.ref = "kotlin" }

kotlin-scripting-jvm = { group = "org.jetbrains.kotlin", name = "kotlin-scripting-jvm", version.ref = "kotlin" }
kotlin-reflect = { group = "org.jetbrains.kotlin", name = "kotlin-reflect", version.ref = "kotlin" }
reflections = { group = "org.reflections", name = "reflections", version = "0.10.2" }
kotlin-test = { group = "org.jetbrains.kotlin", name = "kotlin-test", version.ref = "kotlin" }

# Kotlinx Serialization
serialization-json = { group = "org.jetbrains.kotlinx", name = "kotlinx-serialization-json", version.ref = "kotlinxSerialization" }

# Coroutines
coroutines-core = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }


# Testing
test-junit-api = { group = "org.junit.jupiter", name = "junit-jupiter-api", version.ref = "junit" }
test-junit-params = { group = "org.junit.jupiter", name = "junit-jupiter-params", version.ref = "junit" }
test-junit-engine = { group = "org.junit.jupiter", name = "junit-jupiter-engine", version.ref = "junit" }
test-kotlintest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotlinTest" }
test-mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }
test-assertj = { group = "org.assertj", name = "assertj-core", version.ref = "assertj" }

# Logging
logging-slf4j-api = { group = "org.slf4j", name = "slf4j-api", version.ref = "slf4j" }
logging-logback-classic = { group = "ch.qos.logback", name = "logback-classic", version.ref = "logback" }
logging-kotlin = { group = "io.github.oshai", name = "kotlin-logging-jvm", version.ref = "kotlinLogging" }

# DSL
jupyter-api = { group = "org.jetbrains.kotlinx", name = "kotlin-jupyter-api", version.ref = "jupyterApi" }
jupyter-kernel = { group = "org.jetbrains.kotlinx", name = "kotlin-jupyter-kernel", version.ref = "jupyterApi" }
jupyter-shared-compiler = { group = "org.jetbrains.kotlinx", name = "kotlin-jupyter-shared-compiler", version.ref = "jupyterApi" }

# chapi
chapi-domain = { group = "com.phodal.chapi", name = "chapi-domain", version.ref = "chapi" }
chapi-java = { group = "com.phodal.chapi", name = "chapi-ast-java", version.ref = "chapi" }
chapi-kotlin = { group = "com.phodal.chapi", name = "chapi-ast-kotlin", version.ref = "chapi" }

# archguard
archguard-scanner-core = { group = "org.archguard.scanner", name = "scanner_core", version.ref = "archguard" }
archguard-dsl = { group = "org.archguard.aaac", name = "dsl", version.ref = "archguard" }

# archguard analyser
archguard-analyser-sca = { group = "org.archguard.scanner", name = "analyser_sca", version.ref = "archguard" }
archguard-analyser-diffChanges = { group = "org.archguard.scanner", name = "analyser_diff_changes", version.ref = "archguard" }
archguard-analyser-openapi = { group = "org.archguard.scanner", name = "analyser_openapi", version.ref = "archguard" }
archguard-analyser-estimate = { group = "org.archguard.scanner", name = "analyser_estimate", version.ref = "archguard" }

## analyser_diff_changes
archguard-lang-kotlin = { group = "org.archguard.scanner", name = "lang_kotlin", version.ref = "archguard" }
archguard-lang-java = { group = "org.archguard.scanner", name = "lang_java", version.ref = "archguard" }
archguard-lang-python = { group = "org.archguard.scanner", name = "lang_python", version.ref = "archguard" }
archguard-lang-typescript = { group = "org.archguard.scanner", name = "lang_typescript", version.ref = "archguard" }
archguard-lang-golang = { group = "org.archguard.scanner", name = "lang_golang", version.ref = "archguard" }

archguard-feat-apicalls = { group = "org.archguard.scanner", name = "feat_apicalls", version.ref = "archguard" }
archguard-feat-datamap = { group = "org.archguard.scanner", name = "feat_datamap", version.ref = "archguard" }
codedb-checkout = { group = "org.archguard.codedb", name = "checkout", version.ref = "codedb" }

gson = { group = "com.google.code.gson", name = "gson", version.ref = "gson" }

# llm part
commonmark-core = "org.commonmark:commonmark:0.21.0"
commonmark-gfm-tables = "org.commonmark:commonmark-ext-gfm-tables:0.21.0"
commonmark-heading-anchor = "org.commonmark:commonmark-ext-gfm-tables:0.21.0"

okhttp = "com.squareup.okhttp3:okhttp:4.4.1"
okhttp-sse = "com.squareup.okhttp3:okhttp-sse:4.4.1"
retrofit2-converter-gson = "com.squareup.retrofit2:converter-gson:2.9.0"
openai-gpt3 = "com.theokanning.openai-gpt3-java:service:0.14.0"
retrofit2-converter-jackson = "com.squareup.retrofit2:converter-jackson:2.9.0"
azure-openai = "com.azure:azure-ai-openai:1.0.0-beta.3"

kaml = "com.charleskorn.kaml:kaml:0.55.0"

github-api = "org.kohsuke:github-api:1.314"
gitlab4j-api = "org.gitlab4j:gitlab4j-api:4.17.0"


jackson-module-kotlin = "com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2"
jackson-module-jsonSchema = "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.14.2"
jackson-dataformat-yaml = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2"
jackson-databind = "com.fasterxml.jackson.core:jackson-databind:2.14.2"

# implementation("com.jayway.jsonpath:json-path:2.8.0")
jsonpath = "com.jayway.jsonpath:json-path:2.8.0"

dotenv = "io.github.cdimascio:dotenv-java:3.0.0"
# "io.github.cdimascio:dotenv-kotlin:6.4.1"
dotenv-kotlin = "io.github.cdimascio:dotenv-kotlin:6.4.1"
# implementation("org.apache.velocity:velocity-engine-core:2.3")
velocity-engine = "org.apache.velocity:velocity-engine-core:2.3"

# log
slf4j-simple = "org.slf4j:slf4j-simple:1.7.36"
slf4j-api = "org.slf4j:slf4j-api:1.7.36"

onnxruntime = "com.microsoft.onnxruntime:onnxruntime:1.15.1"
huggingface-tokenizers = "ai.djl.huggingface:tokenizers:0.28.0"
jtokkit = "com.knuddels:jtokkit:1.0.0"

# 	// Serverless Kotlin Language Binding
kotless-lang = { group = "io.kotless", name = "kotless-lang", version.ref = "kotless" }
kotless-lang-local = { group = "io.kotless", name = "kotless-lang-local", version.ref = "kotless" }

kotless-spring-boot-lang = { group = "io.kotless", name = "spring-boot-lang", version.ref = "kotless" }
kotless-spring-boot-lang-local = { group = "io.kotless", name = "spring-boot-lang-local", version.ref = "kotless" }
kotless-spring-lang-parser = { group = "io.kotless", name = "spring-lang-parser", version.ref = "kotless" }

kotless-ktor-lang = { group = "io.kotless", name = "ktor-lang", version.ref = "kotless" }
kotless-ktor-lang-local = { group = "io.kotless", name = "ktor-lang-local", version.ref = "kotless" }

# should keeep save version to src/main/kotlin/cc/unitmesh/code/interpreter/compiler/ExtendLibraries.kt
lets-plot-jvm = "org.jetbrains.lets-plot:lets-plot-kotlin-jvm:4.7.3"
lets-plot-kernel = "org.jetbrains.lets-plot:lets-plot-kotlin-kernel:4.7.3"
lets-plot-image-export = "org.jetbrains.lets-plot:lets-plot-image-export:4.3.3"
lets-plot-common = "org.jetbrains.lets-plot:lets-plot-common:4.3.3"

# implementation("io.reactivex.rxjava3:rxjava:3.1.7")
rxjava3 = "io.reactivex.rxjava3:rxjava:3.1.7"

kotlinx-datetime = "org.jetbrains.kotlinx:kotlinx-datetime:0.4.1"
clikt = "com.github.ajalt.clikt:clikt:4.2.0"

#jsoup
jsoup = "org.jsoup:jsoup:1.16.1"

ktor-client-logging = "io.ktor:ktor-client-logging:2.3.4"
ktor-client-core = "io.ktor:ktor-client-core:2.3.4"
ktor-client-cio = "io.ktor:ktor-client-cio:2.3.4"

jgit = { group = "org.eclipse.jgit", name = "org.eclipse.jgit", version.ref = "jgit" }

# https://mvnrepository.com/artifact/io.swagger.parser.v3/swagger-parser-v3
swagger-parser-v3 = "io.swagger.parser.v3:swagger-parser-v3:2.1.18"
swagger-parser = "io.swagger:swagger-parser:2.0.0-rc1"


[plugins]
jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
jupyter = { id = "org.jetbrains.kotlin.jupyter.api", version.ref = "jupyterApi" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadowJar" }

[bundles]
test = ["test-junit-params", "test-junit-api", "kotlin-test", "test-kotlintest-assertions", "test-mockk", "test-assertj"]

jackson = ["jackson-module-jsonSchema", "jackson-module-kotlin", "jackson-dataformat-yaml"]

# llm bundle
openai = ["openai-gpt3", "retrofit2-converter-jackson", "retrofit2-converter-gson", "jackson-databind", "okhttp", "okhttp-sse"]
markdown = ["commonmark-core", "commonmark-gfm-tables", "commonmark-heading-anchor"]
letsPlot = ["lets-plot-jvm", "lets-plot-kernel", "lets-plot-image-export", "lets-plot-common"]
